#include <iostream>
using namespace std;
#include <omp.h>
#include <random>
int main(void){
        double sum[8]={};
	int spt=1e0;//sample per thread
	int ID,i;
        #pragma omp parallel shared(sum,spt) private(ID,i)
        {
                std::default_random_engine e((unsigned int));
		std::default_random_engine generator;
  		std::uniform_real_distribution<double> distribution(0.0,1.0);
		ID = omp_get_thread_num();
                //int x[1000];
                //initialization
                for(i=0;i<spt;i++){
                        double x = distribution(generator);
			double y = distribution(generator);
			cout<<"L0-->core:"<< ID <<"    "<<x<<","<<y<<std::endl;
			if(x*x+y*y<1.0){
				sum[ID]++;
			}
                }
		#pragma omp critical
                cout<<"L0-->core:"<< ID <<", sum:"<< sum[ID]<<std::endl;
		#pragma omp barrier
		if(!(ID%2)){
			sum[ID]+=sum[ID+1];
			cout<<"L1-->core:"<< ID <<", sum:"<< sum[ID]<<std::endl;
		}
		#pragma omp barrier
		if(!(ID%4)){
			sum[ID]+=sum[ID+2];
			cout<<"L2-->core:"<< ID <<", sum:"<< sum[ID]<<std::endl;
		}
		#pragma omp barrier
		if(!(ID%8)){
			sum[ID]+=sum[ID+4];
			cout<<"L3-->core:"<< ID <<", sum:"<< sum[ID]<<std::endl;
		}
	}
        return 0;
}

